import gc, machine, time, ntptime, dht, ujson
from bh1750 import BH1750
from umqtt.simple import MQTTClient
gc.collect() # free memory for main run

# ----------------------------------------
DEBUG = False
logfile = 'debug.log'

# return iso8601 timestamp
def timestamp():
    return '{:0>4d}-{:0>2d}-{:0>2d}T{:0>2d}:{:0>2d}:{:0>2d}Z'.format(*time.localtime())

# log to file
def log(msg):
    global logfile
    global DEBUG
    t = '{} : {}\n'.format(timestamp(), msg)
    if DEBUG:
        f = open(logfile, 'a')
        f.write(t)
        f.close()
    print(t, end='')
# ----------------------------------------


# ----------------------------------------
# set time
ntptime.settime()
log('Time is {}'.format(timestamp()))
# ----------------------------------------


# ----------------------------------------
# DHT11
d_pwr = machine.Pin(12, machine.Pin.OUT)
d_pwr.value(1) # pwr up sensor
time.sleep(2) # allow to initialise
d = dht.DHT11(machine.Pin(14))
# ----------------------------------------


# ----------------------------------------
# bh1750 on i2c
scl = machine.Pin(5)
sda = machine.Pin(4)
i2c = machine.I2C(scl,sda)
s = BH1750(i2c)
# ----------------------------------------


# # ----------------------------------------
# # MQTT Watson
# # client = 'd:8e4usp:micropython:ESP_E11D8B' # tim.pelling@carillionmena.com
# client = 'd:t4nd4g:esp-mpy-dht11-bh1750:ESP_E11D8B' # timothy.pelling@carillionplc.com
# user_name = 'use-token-auth'
# # user_token = 'maSU@k0xAv4qnF@gFz' # tim.pelling@carillionmena.com
# user_token = '+IKkUg&7ZIKpRvMcdv' # timothy.pelling@carillionplc.com
# # server = '8e4usp.messaging.internetofthings.ibmcloud.com' # tim.pelling@carillionmena.com
# server = 't4nd4g.messaging.internetofthings.ibmcloud.com' # timothy.pelling@carillionplc.com
# topic = 'iot-2/evt/sample/fmt/json'
# # ----------------------------------------
server = '192.168.0.80'
server_port = 1883
topic = 'nodes'

# connect
# c = MQTTClient(client, server, port=server_port, user=user_name, password=user_token)
c = MQTTClient(client, server, port=server_port)
c.connect()

# send data
d.measure()
sample = {'l': s.get_measurement(),
          't': d.temperature(),
          'h': d.humidity()
         }
log('{} : {}lux, {}c, {}%'.format(
    timestamp(),
    sample['l'],
    sample['t'],
    sample['h']
))
c.publish(topic, ujson.dumps(sample))
# ----------------------------------------

# ----------------------------------------
# sleep
rtc = machine.RTC()
rtc.irq(trigger=rtc.ALARM0, wake=machine.DEEPSLEEP)
rtc.alarm(rtc.ALARM0, 5*60*1000) # five minutes
machine.deepsleep()
# ----------------------------------------
