[
    {
        "id": "df0246a4.5a7b18",
        "type": "tab",
        "label": "www"
    },
    {
        "id": "15d520ef.ffe77f",
        "type": "http in",
        "z": "df0246a4.5a7b18",
        "name": "",
        "url": "/iocp/range",
        "method": "get",
        "swaggerDoc": "",
        "x": 320,
        "y": 620,
        "wires": [
            [
                "a2c7b68c.cbe978"
            ]
        ]
    },
    {
        "id": "a2c7b68c.cbe978",
        "type": "function",
        "z": "df0246a4.5a7b18",
        "name": "build_query",
        "func": "// query string\n// msg.payload = {\"timestamp\": {\n//     \"$gte\": new Date(msg.payload.start),\n//     \"$lt\": new Date(msg.payload.end)\n// }};\nmsg.payload = {\n    \"$and\": [\n        {\"node\": msg.payload.node},\n        {\"timestamp\": {\n            \"$gte\": new Date(msg.payload.start),\n            \"$lt\": new Date(msg.payload.end)\n        }}\n    ]\n};\n\n// sort by timestamp\nmsg.sort = {\n    \"timestamp\": true, // ascending\n};\n\n// fields to return \nmsg.projection = {\n    \"timestamp\": 1,\n    \"t\": true, \n    \"h\": true, \n    \"l\": true, \n    \"_id\": false, // returned if not excluded\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 620,
        "wires": [
            [
                "3f0c1a46.81c9b6"
            ]
        ]
    },
    {
        "id": "3f0c1a46.81c9b6",
        "type": "mongodb in",
        "z": "df0246a4.5a7b18",
        "mongodb": "2fa38bb1.9762c4",
        "name": "find: nodes",
        "collection": "nodes",
        "operation": "find",
        "x": 690,
        "y": 620,
        "wires": [
            [
                "9b30f45c.c6c2e8"
            ]
        ]
    },
    {
        "id": "9b30f45c.c6c2e8",
        "type": "http response",
        "z": "df0246a4.5a7b18",
        "name": "",
        "x": 990,
        "y": 620,
        "wires": []
    },
    {
        "id": "673d5686.7974a8",
        "type": "comment",
        "z": "df0246a4.5a7b18",
        "name": "range",
        "info": "",
        "x": 90,
        "y": 620,
        "wires": []
    },
    {
        "id": "37ba6b03.059d44",
        "type": "http in",
        "z": "df0246a4.5a7b18",
        "name": "",
        "url": "/iocp",
        "method": "get",
        "swaggerDoc": "",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "78f9fd5f.1b1664"
            ]
        ]
    },
    {
        "id": "78f9fd5f.1b1664",
        "type": "template",
        "z": "df0246a4.5a7b18",
        "name": "page",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>iocp</title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n        <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js\"></script>\n        <script src=\"https://d3js.org/d3.v4.min.js\"></script>\n        <script src=\"/iocp/index.js\"></script>\n        <style>\n            .tablet {\n                height: 150px;\n                width: 150px;\n            }\n        </style>\n    </head>\n\n    <body ng-app=\"app\" ng-controller=\"main\" class=\"w3-light-grey\">\n\n        <!-- header -->\n        <div class=\"w3-container w3-dark-grey w3-top\">\n            <p class=\"w3-half w3-left-align\">\n                Node: <select ng-model=\"selectedNode\" ng-options=\"node for node in nodes\"></select>\n            </p>\n            <p class=\"w3-half w3-right-align\">the Internet Of Chilli Peppers</p>\n        </div>\n\n\n        <div class=\"w3-main\" style=\"margin-top:60px;\">\n\n            <!-- most recent datapoint -->\n            <div class=\"w3-container\">\n\n                <!-- timestamp -->\n                <div ng-cloak class=\"w3-tag w3-margin w3-grey w3-padding-large w3-bottombar w3-border-black\">\n                    <div class=\"w3-display-container tablet\">\n                        <div class=\"w3-display-topleft fa fa-clock-o w3-xxlarge\"></div>\n                        <div class=\"w3-display-topright w3-right-align\">\n                            <span class=\"w3-small\" ng-bind=\"timestamp | date\"></span><br/>\n                            <span class=\"w3-large\" ng-bind=\"timestamp | date : 'hh:mm'\"></span><br/>\n                            <i class=\"w3-small\">Last seen:</i><br/>\n                            <i class=\"w3-small\">{{dDays}} days {{(\"00\"+dHours).slice(-2)}}:{{(\"00\"+dMinutes).slice(-2)}}:{{(\"00\"+dSeconds).slice(-2)}}</i>\n                        </div>\n                        <div class=\"w3-display-bottomleft\"><h3>timestamp</h3></div>\n                    </div>\n                </div>\n\n                <!-- samples -->\n                <div ng-repeat=\"point in datapoints\"\n                    class=\"w3-tag w3-margin {{types[point].color}} w3-padding-large w3-bottombar w3-border-black\"\n                >\n                    <div class=\"w3-display-container tablet\">\n                        <div class=\"w3-display-topleft fa {{types[point].icon}} w3-xxlarge\"></div>\n                        <div class=\"w3-display-topright\"><h3>\n                            {{sample[point] | number:1}}{{types[point].unit}}\n                        </h3></div>\n                        <div class=\"w3-display-bottomleft\"><h3>\n                            {{types[point].title}}\n                        </h3></div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"w3-container\">\n\n                <!-- chart controls -->\n                <div>\n                    <i class=\"w3-xlarge fa fa-line-chart\"></i>\n                    &nbsp;&nbsp;Date:\n                    <input name=\"decmonthsstart\" type=\"button\" ng-click=\"monthsadd(start, end, -1)\" value=\"<<\"/>\n                    <input name=\"decdaysstart\" type=\"button\" ng-click=\"daysadd(start, end, -1)\" value=\"<\"/>\n                    <input name=\"start\" id=\"start\" value=\"{{start | date : 'yyyy-MM-dd'}}\" type=\"date\"/>\n                    <input name=\"incdaysstart\" type=\"button\" ng-click=\"daysadd(start, end, +1)\" value=\">\"/>\n                    <input name=\"incmonthsstart\" type=\"button\" ng-click=\"monthsadd(start, end, +1)\" value=\">>\"/>\n                    &nbsp;&nbsp;\n                    <!--<input name=\"refresh\" type=\"button\" ng-click=\"radialChartUpdate()\" value=\"+\"/>-->\n                </div>\n\n                <!-- chart -->\n                <svg id=\"graph\"></svg>\n\n            </div>\n\n        </div>\n\n    </body>\n\n</html>\n",
        "x": 290,
        "y": 120,
        "wires": [
            [
                "e50bace6.1f809"
            ]
        ]
    },
    {
        "id": "e50bace6.1f809",
        "type": "http response",
        "z": "df0246a4.5a7b18",
        "name": "",
        "x": 470,
        "y": 120,
        "wires": []
    },
    {
        "id": "4419f55c.d8ecbc",
        "type": "comment",
        "z": "df0246a4.5a7b18",
        "name": "presentation",
        "info": "template is plaintext because angular uses \nsimilar variable templating to mustache.",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "152c0ba9.b82404",
        "type": "comment",
        "z": "df0246a4.5a7b18",
        "name": "last datapoint",
        "info": "",
        "x": 110,
        "y": 560,
        "wires": []
    },
    {
        "id": "e196d913.835e18",
        "type": "http in",
        "z": "df0246a4.5a7b18",
        "name": "",
        "url": "/iocp/current",
        "method": "get",
        "swaggerDoc": "",
        "x": 320,
        "y": 560,
        "wires": [
            [
                "3fb9bf72.6d1ec"
            ]
        ]
    },
    {
        "id": "3fb9bf72.6d1ec",
        "type": "function",
        "z": "df0246a4.5a7b18",
        "name": "build_query",
        "func": "// query everything\n// TODO: filter by node name\n// msg.payload = '';\nmsg.payload = { \"node\": msg.payload.node };\n\n// sort backwards\nmsg.sort = {\"$natural\": -1};\n\n// only last (first in reverse order)\nmsg.limit = 1;\n\n// fields to return \n// msg.projection = {\n//     \"timestamp\": 1,\n//     \"t\": true, \n//     \"h\": true, \n//     \"l\": true, \n//     \"timestamp\": true,\n//     \"_id\": false, // returned if not excluded\n// };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 560,
        "wires": [
            [
                "4a674517.c57f9c"
            ]
        ]
    },
    {
        "id": "4a674517.c57f9c",
        "type": "mongodb in",
        "z": "df0246a4.5a7b18",
        "mongodb": "2fa38bb1.9762c4",
        "name": "find: nodes",
        "collection": "nodes",
        "operation": "find",
        "x": 690,
        "y": 560,
        "wires": [
            [
                "d5e40102.cfe68"
            ]
        ]
    },
    {
        "id": "d5e40102.cfe68",
        "type": "http response",
        "z": "df0246a4.5a7b18",
        "name": "",
        "x": 990,
        "y": 560,
        "wires": []
    },
    {
        "id": "ab9b01a8.9287c",
        "type": "http in",
        "z": "df0246a4.5a7b18",
        "name": "",
        "url": "/iocp/types",
        "method": "get",
        "swaggerDoc": "",
        "x": 320,
        "y": 680,
        "wires": [
            [
                "93d3a7a.1b25658"
            ]
        ]
    },
    {
        "id": "93d3a7a.1b25658",
        "type": "template",
        "z": "df0246a4.5a7b18",
        "name": "types table",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "plain",
        "template": "{\n    \"t\": { \"title\": \"temp\", \n           \"icon\": \"fa-thermometer-1\", \n           \"color\": \"w3-red\", \n           \"unit\": \"°C\",\n           \"linestyle\": \"stroke:#f44336; stroke-width: 3; fill:none;\",\n           \"areastyle\": \"fill:#f44336; fill-opacity:.1; stroke: none;\",\n           \"tickstyle\": \"stroke:grey; stroke-width: 1; fill:none;\",\n           \"scale\": [0, 60]\n    },\n    \"h\": { \"title\": \"humidity\", \n           \"icon\": \"fa-cloud\", \n           \"color\": \"w3-blue\", \n           \"unit\": \"%\",\n           \"linestyle\": \"stroke:#2196F3; stroke-width: 3; fill:none;\",\n           \"areastyle\": \"fill:#2196F3; fill-opacity:.1; stroke: none;\",\n           \"tickstyle\": \"stroke:grey; stroke-width: 1; fill:none;\",\n           \"scale\": [0, 100]\n    },\n    \"l\": { \"title\": \"luminance\", \n           \"icon\": \"fa-sun-o\", \n           \"color\": \"w3-green\", \n           \"unit\": \"lx\", \n           \"linestyle\": \"stroke:#4CAF50; stroke-width: 3; fill:none;\",\n           \"areastyle\": \"fill:#4CAF50; fill-opacity:.1; stroke: none;\",\n           \"tickstyle\": \"stroke:grey; stroke-width: 1; fill:none;\",\n           \"scale\": [0, 3000]\n    }\n}\n",
        "x": 510,
        "y": 680,
        "wires": [
            [
                "3b43e1ae.b657ce"
            ]
        ]
    },
    {
        "id": "3b43e1ae.b657ce",
        "type": "http response",
        "z": "df0246a4.5a7b18",
        "name": "",
        "x": 990,
        "y": 680,
        "wires": []
    },
    {
        "id": "e468497a.81d5f8",
        "type": "comment",
        "z": "df0246a4.5a7b18",
        "name": "types",
        "info": "",
        "x": 90,
        "y": 680,
        "wires": []
    },
    {
        "id": "50eb5f44.6477d",
        "type": "comment",
        "z": "df0246a4.5a7b18",
        "name": "mongo queries",
        "info": "",
        "x": 120,
        "y": 520,
        "wires": []
    },
    {
        "id": "d90d0856.bf1968",
        "type": "http in",
        "z": "df0246a4.5a7b18",
        "name": "",
        "url": "/test",
        "method": "get",
        "swaggerDoc": "",
        "x": 100,
        "y": 240,
        "wires": [
            [
                "c2414cb1.3be72"
            ]
        ]
    },
    {
        "id": "c2414cb1.3be72",
        "type": "template",
        "z": "df0246a4.5a7b18",
        "name": "test page",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>iocp</title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n        <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js\"></script>\n        <script src=\"https://d3js.org/d3.v4.min.js\"></script>\n        <script src=\"/iocp/test.js\"></script>\n        <style>\n            .tablet {\n                height: 150px;\n                width: 150px;\n            }\n        </style>\n    </head>\n\n    <body ng-app=\"app\" ng-controller=\"main\" class=\"w3-light-grey\">\n\n        <svg id=\"summary\"></svg>\n\n\n    </body>\n\n</html>\n",
        "x": 300,
        "y": 240,
        "wires": [
            [
                "c359de56.a688e"
            ]
        ]
    },
    {
        "id": "c359de56.a688e",
        "type": "http response",
        "z": "df0246a4.5a7b18",
        "name": "",
        "x": 470,
        "y": 240,
        "wires": []
    },
    {
        "id": "eefcfb24.190828",
        "type": "comment",
        "z": "df0246a4.5a7b18",
        "name": "nodes",
        "info": "",
        "x": 90,
        "y": 740,
        "wires": []
    },
    {
        "id": "9747b030.bfff3",
        "type": "http in",
        "z": "df0246a4.5a7b18",
        "name": "",
        "url": "/iocp/nodes",
        "method": "get",
        "swaggerDoc": "",
        "x": 320,
        "y": 740,
        "wires": [
            [
                "369fb42d.80460c"
            ]
        ]
    },
    {
        "id": "c6a570fa.fb4cf",
        "type": "http response",
        "z": "df0246a4.5a7b18",
        "name": "",
        "x": 990,
        "y": 740,
        "wires": []
    },
    {
        "id": "369fb42d.80460c",
        "type": "function",
        "z": "df0246a4.5a7b18",
        "name": "build_query",
        "func": "// query string\n// db.nodes.aggregate([{$group: {_id:null, uniqueValues: {$addToSet: \"$node\"}}}]).result[0].uniqueValues\nmsg.payload = [{\n    \"$group\": {\n        \"_id\": null, \n        \"uniqueValues\": {\"$addToSet\": \"$node\"}\n        \n    }\n}];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 740,
        "wires": [
            [
                "b1caeb99.8cfb48"
            ]
        ]
    },
    {
        "id": "b1caeb99.8cfb48",
        "type": "mongodb in",
        "z": "df0246a4.5a7b18",
        "mongodb": "2fa38bb1.9762c4",
        "name": "aggr: nodes",
        "collection": "nodes",
        "operation": "aggregate",
        "x": 690,
        "y": 740,
        "wires": [
            [
                "654a3ea4.3064c"
            ]
        ]
    },
    {
        "id": "654a3ea4.3064c",
        "type": "change",
        "z": "df0246a4.5a7b18",
        "name": "clean",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload[0].uniqueValues",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 740,
        "wires": [
            [
                "c6a570fa.fb4cf"
            ]
        ]
    },
    {
        "id": "a8d4a0aa.256f4",
        "type": "http in",
        "z": "df0246a4.5a7b18",
        "name": "",
        "url": "/iocp/index.js",
        "method": "get",
        "swaggerDoc": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "76fed37c.d0bf1c"
            ]
        ]
    },
    {
        "id": "76fed37c.d0bf1c",
        "type": "template",
        "z": "df0246a4.5a7b18",
        "name": "index.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "plain",
        "template": "var app = angular.module(\"app\", []);\n\napp.controller(\"main\", function($scope, $http, $interval) {\n\n    $scope.start = new Date(new Date().setHours(0,0,0,0));\n    $scope.end = new Date(new Date().setHours(23,59,59,999));\n    width = 600;\n    height = 600;\n    radius = Math.min(width,height)/2;\n    margin = {left:50, right:50, top:50, bottom:50 }\n    hours = d3.timeHours($scope.start, $scope.end, 1);\n    // radial scales\n    radii = {};\n    radii[\"r\"] = d3.scaleLinear()\n                    .domain([0, 1])\n                    .range([radius/2, radius]);\n\n    // range button handlers\n    $scope.daysadd = function(sdt, edt, i) {\n        sdt.setDate(sdt.getDate()+i);\n        edt.setDate(edt.getDate()+i);\n        $scope.radialchartUpdate();\n    };\n    $scope.monthsadd = function(sdt, edt, i) {\n        sdt.setMonth(sdt.getMonth()+i);\n        edt.setMonth(edt.getMonth()+i);\n        $scope.radialchartUpdate();\n    };\n\n    // update most recent datapoint\n    $scope.updateLiveView = function() {\n        $http.get(\"/iocp/current?node=\"+ $scope.selectedNode)\n            .then(function(response) {\n                $scope.sample = response.data[0];\n                $scope.timestamp = new Date($scope.sample[\"timestamp\"]);\n                $scope.datapoints = Object.keys($scope.sample).filter(\n                    function(k) {\n                        return !(k==\"node\"|k==\"timestamp\"|k==\"_id\");\n                    }\n                );\n            });\n    };\n    // time elapsed since most recent datapoint\n    $scope.updateTimeElapsed = function() {\n        dt = new Date(new Date() - $scope.timestamp);\n        dt /= 1000; // strip ms\n        $scope.dSeconds = Math.round(dt%60);\n        dt = Math.floor(dt/60); // stip s\n        $scope.dMinutes = Math.round(dt%60);\n        dt = Math.floor(dt/60); // stip m\n        $scope.dHours = Math.round(dt/24);\n        dt = Math.floor(dt/24);\n        $scope.dDays = dt;\n    };\n\n    // chart setup\n    canvas = d3.select(\"#graph\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n    chart = canvas.append(\"g\")\n            // translate & rotate coordinate space\n            .attr(\n                \"transform\", \"translate(\"\n                + ((width / 2) + margin.left) + \",\"\n                + ((height / 2) + margin.top) + \")\"\n                + \" rotate(180)\"\n            );\n\n    // radial axis\n    gr = chart.append(\"g\")\n        .selectAll(\"g\")\n            .data(radii.r.ticks(10))\n            .enter().append(\"g\")\n    gr.append(\"circle\")\n        .attr(\"r\", radii.r)\n        .attr(\"style\", \"fill:none; stroke:grey; stroke-dasharray:1,2;\");\n\n    // angular scale\n    a = d3.scaleLinear()\n        .domain([$scope.start, $scope.end])\n        .range([0, Math.PI*2])\n\n    // angular axis\n    // TODO: only works for 0-24 constraint\n    ga = chart.append(\"g\")\n        .selectAll(\"g\")\n            .data(hours.map( (d) => a(d)*(180/Math.PI) ))\n            .enter().append(\"g\")\n                .attr(\"transform\", (d) => \"rotate(\" + (d - 90) + \")\" )\n    ga.append(\"line\")\n        .attr(\"x1\", radius/2)\n        .attr(\"x2\", radius)\n        .attr(\"style\", \"stroke:black\");\n    ga.append(\"text\")\n        .attr(\"x\", radius + 6)\n        .attr(\"dy\", \".35em\")\n        .text ( (d,i) => hours[i].toLocaleTimeString().substr(0,8) )\n            .attr(\"style\", \"font: 10px sans-serif\")\n\n    // line & area functions\n    line = function(type) {\n        return d3.radialLine()\n            .radius( (d) => radii[type](d[type]) )\n            .angle( (d) => a(new Date(d.timestamp)) )\n            .curve(d3.curveBasis);\n    };\n    area = function(type) {\n        return d3.radialArea()\n            .innerRadius(radius/2)\n            .outerRadius( (d) => radii[type](d[type]) )\n            .angle( (d) => a(new Date(d.timestamp)) )\n            .curve(d3.curveBasis);\n    };\n\n    // available nodes in db\n    $http.get(\"iocp/nodes\")\n        .then(function(response) {\n\n            $scope.nodes = response.data;\n            $scope.selectedNode = $scope.nodes[0];\n\n            // datapoint types\n            return $http.get(\"iocp/types\");\n\n        }).then(function(response) {\n\n            types = response.data;\n            $scope.types = types;\n\n            // update most recent datapoint badges\n            // updateLiveView();\n            // updateTimeElapsed();\n            // $interval( updateLiveView, 60*1000);\n            // $interval( updateTimeElapsed, 1000);\n\n            // radial scales for types\n            for (k in types) {\n                if (k!=\"node\" & k!=\"timestamp\" & k!=\"_id\") {\n                    radii[k] = d3.scaleLinear()\n                        .domain(types[k].scale)\n                        .range([radius/2, radius])\n                }\n            }\n\n            // angular axis\n            ang = 90;\n            for (k in types) {\n\n                gr = chart.append(\"g\")\n                    .attr(\"transform\", \"rotate(\" + ang + \")\")\n\n                gr.selectAll(\"g\")\n                    .data(radii[k].ticks(10))\n                    .enter().append(\"g\")\n                        .append(\"text\")\n                            .attr(\"y\", (d) => -radii[k](d) - 4 )\n                            .attr(\"transform\", \"rotate(90) translate(5,0)\")\n                            .attr(\"style\", \"font: 10px sans-serif\")\n                            .text( (d) => d.toFixed(0) );\n\n                gr.append(\"line\")\n                    .attr(\"x1\", radius/2)\n                    .attr(\"x2\", radius)\n                    .attr(\"style\", types[k].linestyle);\n\n                ang += 360/24;\n\n            }\n\n            // current date\n            $scope.date = chart.append(\"text\")\n                .text($scope.start.toDateString())\n                .attr(\"style\", \"font: 20px sans-serif; text-anchor:middle;\")\n                // the coord space is inverted\n                .attr(\"transform\", \"rotate(180)\")\n\n            // line and area fns for types\n            lines={}, areas={};\n            for (k in types) {\n                if (k!=\"node\" & k!=\"timestamp\" & k!=\"_id\") {\n\n                    lines[k] = chart.append(\"path\")\n                        .attr(\"style\", types[k].areastyle);\n\n                    areas[k] = chart.append(\"path\")\n                        .attr(\"style\", types[k].linestyle);\n\n                }\n            }\n\n            // generate plots\n            $scope.radialchartUpdate = function() {\n                $http.get(\n                        \"/iocp/range?node=\"\n                        + $scope.selectedNode\n                        + \"&start=\" + $scope.start.toString()\n                        + \"&end=\" + $scope.end.toString()\n                    ).then(function(response) {\n                        $scope.date.text($scope.start.toDateString())\n                        data = response.data;\n                        for (k in types) {\n                            lines[k].datum(data)\n                                // applying when data.length==0\n                                // clears previous chart\n                                .attr(\"d\", area(k));\n                            areas[k].datum(data)\n                                .attr(\"d\", line(k))\n                        }\n                })\n            }\n\n            // update\n            $scope.updateLiveView();\n            $scope.updateTimeElapsed();\n            $scope.radialchartUpdate();\n            $interval($scope.updateLiveView, 60*1000);\n            $interval($scope.updateTimeElapsed, 1000);\n            $interval($scope.radialchartUpdate, 60*1000);\n\n      })\n\n})",
        "x": 300,
        "y": 180,
        "wires": [
            [
                "a8549ff0.800c6"
            ]
        ]
    },
    {
        "id": "a8549ff0.800c6",
        "type": "http response",
        "z": "df0246a4.5a7b18",
        "name": "",
        "x": 470,
        "y": 180,
        "wires": []
    },
    {
        "id": "98b7caa0.00c4a8",
        "type": "http in",
        "z": "df0246a4.5a7b18",
        "name": "",
        "url": "/iocp/test.js",
        "method": "get",
        "swaggerDoc": "",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "90c25779.dc6078"
            ]
        ]
    },
    {
        "id": "90c25779.dc6078",
        "type": "template",
        "z": "df0246a4.5a7b18",
        "name": "test.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "plain",
        "template": "var app = angular.module(\"app\", []);\n\napp.controller(\"main\", function($scope, $http, $interval) {\n\n    node = \"esp8266:18:fe:34:e1:1d:8b\";\n    month = 5;\n    year = 2017;\n    start = new Date(year, month-1, 1, 0, 0, 0, 0)\n    end = new Date(new Date(year, month, 1, 0, 0, 0, 0)-1)\n\n    width = 900;\n    height = 50;\n    margin = {left:15, right:15, top:15, bottom:30}\n\n    canvas = d3.select(\"#summary\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom);\n    chart = canvas.append(\"g\")\n            .attr(\n                \"transform\", \"translate(\"\n                + ((width / 2) + margin.left) + \",\"\n                + ((height / 2) + margin.top) + \")\"\n            );\n\n    x = d3.scaleTime()\n        .domain([start, end])\n        .range([0, width]);\n\n    // only appropriate for t & h\n    y = d3.scaleLinear()\n        .domain([0, 100])\n        .range([0, height])\n\n    canvas.append(\"g\")\n        .call(\n            d3.axisBottom(x)\n                .ticks(new Date(year,month,0).getDate())\n                .tickFormat(d3.timeFormat(\"%d\"))\n        )\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + (height + margin.top) + \")\");\n\n    line = function(datapoint) {\n        return d3.line()\n            .x( (d) => x(new Date(d._id.year, d._id.month-1, d._id.day, d._id.hour,0,0,0)))\n            .y( (d) => y(d[datapoint]))\n            // .curve(d3.curveBasis);\n    };\n\n    $http.get(\n        \"iocp/summary\"\n        + \"?node=\" + node\n        + \"&year=\" + year\n        + \"&month=\" + month\n    ).then(function(response){\n\n        data = response.data;\n\n        for (k in [\"averageTemp\", \"averageHumidity\"]) {\n\n            chart.append(\"path\")\n                .datum(data)\n                .attr(\"d\", line(k))\n                .attr(\"style\", \"stroke:black; stroke-width:1; fill:none\");\n\n        };\n\n    });\n\n})",
        "x": 290,
        "y": 300,
        "wires": [
            [
                "8a2435e4.5c6608"
            ]
        ]
    },
    {
        "id": "8a2435e4.5c6608",
        "type": "http response",
        "z": "df0246a4.5a7b18",
        "name": "",
        "x": 470,
        "y": 300,
        "wires": []
    },
    {
        "id": "76cc9944.9ab858",
        "type": "http in",
        "z": "df0246a4.5a7b18",
        "name": "",
        "url": "/linear",
        "method": "get",
        "swaggerDoc": "",
        "x": 100,
        "y": 360,
        "wires": [
            [
                "c95276c5.4006e8"
            ]
        ]
    },
    {
        "id": "c95276c5.4006e8",
        "type": "template",
        "z": "df0246a4.5a7b18",
        "name": "linear page",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>iocp</title>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n        <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\n        <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js\"></script>\n        <script src=\"https://d3js.org/d3.v4.min.js\"></script>\n        <script src=\"/iocp/index.js\"></script>\n        <style>\n            .tablet {\n                height: 150px;\n                width: 150px;\n            }\n        </style>\n    </head>\n\n    <body ng-app=\"app\" ng-controller=\"main\" class=\"w3-light-grey\">\n\n        <!-- header -->\n        <div class=\"w3-container w3-dark-grey w3-top\">\n            <p class=\"w3-half w3-left-align\">\n                Node: <select ng-model=\"selectedNode\" ng-options=\"node for node in nodes\"></select>\n            </p>\n            <p class=\"w3-half w3-right-align\">the Internet Of Chilli Peppers</p>\n        </div>\n\n\n        <div class=\"w3-main\" style=\"margin-top:60px;\">\n\n            <!-- most recent datapoint -->\n            <div class=\"w3-container\">\n\n                <!-- timestamp -->\n                <div ng-cloak class=\"w3-tag w3-margin w3-grey w3-padding-large w3-bottombar w3-border-black\">\n                    <div class=\"w3-display-container tablet\">\n                        <div class=\"w3-display-topleft fa fa-clock-o w3-xxlarge\"></div>\n                        <div class=\"w3-display-topright w3-right-align\">\n                            <span class=\"w3-small\" ng-bind=\"timestamp | date\"></span><br/>\n                            <span class=\"w3-large\" ng-bind=\"timestamp | date : 'HH:MM'\"></span><br/>\n                            <i class=\"w3-small\">Last seen:</i><br/>\n                            <i class=\"w3-small\">{{dDays}} days {{(\"00\"+dHours).slice(-2)}}:{{(\"00\"+dMinutes).slice(-2)}}:{{(\"00\"+dSeconds).slice(-2)}}</i>\n                        </div>\n                        <div class=\"w3-display-bottomleft\"><h3>timestamp</h3></div>\n                    </div>\n                </div>\n\n                <!-- samples -->\n                <div ng-repeat=\"point in datapoints\"\n                    class=\"w3-tag w3-margin {{types[point].color}} w3-padding-large w3-bottombar w3-border-black\"\n                >\n                    <div class=\"w3-display-container tablet\">\n                        <div class=\"w3-display-topleft fa {{types[point].icon}} w3-xxlarge\"></div>\n                        <div class=\"w3-display-topright\"><h3>\n                            {{sample[point] | number:1}}{{types[point].unit}}\n                        </h3></div>\n                        <div class=\"w3-display-bottomleft\"><h3>\n                            {{types[point].title}}\n                        </h3></div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"w3-container\">\n\n                <!-- chart controls -->\n                <div>\n                    <i class=\"w3-xlarge fa fa-line-chart\"></i>\n                    &nbsp;&nbsp;Date:\n                    <input name=\"decmonthsstart\" type=\"button\" ng-click=\"monthsadd(start, end, -1)\" value=\"<<\"/>\n                    <input name=\"decdaysstart\" type=\"button\" ng-click=\"daysadd(start, end, -1)\" value=\"<\"/>\n                    <input name=\"start\" id=\"start\" value=\"{{start | date : 'yyyy-MM-dd'}}\" type=\"date\"/>\n                    <input name=\"incdaysstart\" type=\"button\" ng-click=\"daysadd(start, end, +1)\" value=\">\"/>\n                    <input name=\"incmonthsstart\" type=\"button\" ng-click=\"monthsadd(start, end, +1)\" value=\">>\"/>\n                    &nbsp;&nbsp;\n                    <!--<input name=\"refresh\" type=\"button\" ng-click=\"radialChartUpdate()\" value=\"+\"/>-->\n                </div>\n\n                <!-- chart -->\n                <svg id=\"graph\"></svg>\n\n            </div>\n\n        </div>\n\n    </body>\n\n</html>\n",
        "x": 310,
        "y": 360,
        "wires": [
            [
                "f9102def.e7662"
            ]
        ]
    },
    {
        "id": "f9102def.e7662",
        "type": "http response",
        "z": "df0246a4.5a7b18",
        "name": "",
        "x": 470,
        "y": 360,
        "wires": []
    },
    {
        "id": "b727d3a7.4730b",
        "type": "http in",
        "z": "df0246a4.5a7b18",
        "name": "",
        "url": "/iocp/linear.js",
        "method": "get",
        "swaggerDoc": "",
        "x": 130,
        "y": 420,
        "wires": [
            [
                "b7837ace.73aa38"
            ]
        ]
    },
    {
        "id": "b7837ace.73aa38",
        "type": "template",
        "z": "df0246a4.5a7b18",
        "name": "linear.js",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "plain",
        "template": "var app = angular.module(\"app\", []);\n\napp.controller(\"main\", function($scope, $http, $interval) {\n\n    // update most recent datapoint\n    updateLiveView = function() {\n        $http.get(\"/iocp/current?node=\"+ $scope.selectedNode)\n            .then(function(response) {\n                $scope.sample = response.data[0];\n                $scope.timestamp = new Date($scope.sample[\"timestamp\"]);\n                $scope.datapoints = Object.keys($scope.sample).filter(\n                    function(k) {\n                        return !(k==\"node\"|k==\"timestamp\"|k==\"_id\");\n                    }\n                );\n            });\n    };\n\n    // update time elapsed since most recent datapoint\n    updateTimeElapsed = function() {\n        $scope.timeelapsed = new Date(new Date() - $scope.timestamp);\n    };\n\n    // chart range\n    // $scope.start = new Date(new Date().setUTCHours(0,0,0,0));\n    // $scope.end = new Date(new Date().setUTCHours(23,59,59,999));\n    $scope.start = new Date(new Date().setHours(0,0,0,0));\n    $scope.end = new Date(new Date().setHours(23,59,59,999));\n\n    // chart range button handlers\n    $scope.daysadd = function(sdt, edt, i) {\n        sdt.setDate(sdt.getDate()+i);\n        edt.setDate(edt.getDate()+i);\n        linechartUpdate();\n    };\n    $scope.monthsadd = function(sdt, edt, i) {\n        sdt.setMonth(sdt.getMonth()+i);\n        edt.setMonth(edt.getMonth()+i);\n        linechartUpdate();\n    };\n\n    // update chart content - lines and time axis\n    linechartUpdate = function() {\n        $http.get(\"/iocp/range?node=\"+ $scope.selectedNode + \"&start=\" + $scope.start.toISOString() + \"&end=\" + $scope.end.toISOString())\n            .then(function(response) {\n\n            data = response.data;\n\n            // clear chart content\n            chart.selectAll(\"*\").remove();\n\n            // update x (time) scale\n            xscale = d3.scaleTime()\n                .domain([$scope.start, $scope.end])\n                .range([0, width]);\n            chart.append(\"g\")\n                .call(d3.axisBottom(xscale))\n                .attr(\"transform\", \"translate(0,\" + (height) + \")\");\n\n            // draw lines\n            // temperature -->\n            chart.append(\"path\")\n                .datum(data)\n                .attr(\"d\", templine)\n                .attr(\"style\", $scope.types[\"t\"].linestyle);\n            // humidity -->\n            chart.append(\"path\")\n                .datum(data)\n                .attr(\"d\", humidityline)\n                .attr(\"style\", $scope.types[\"h\"].linestyle);\n            // luminance -->\n            chart.append(\"path\")\n                .datum(data)\n                .attr(\"d\", luminanceline)\n                .attr(\"style\", $scope.types[\"l\"].linestyle);\n\n        });\n    };\n\n    // MAIN\n    $http.get(\"/iocp/nodes\")\n        .then(function(response) {\n            $scope.nodes = response.data;\n            $scope.selectedNode = $scope.nodes[0];\n            // TODO: return $http.get(\"/iocp/types?\" + $scope.selectedNode)\n            return $http.get(\"/iocp/types\")\n        })\n        .then(function(response) {\n            $scope.types = response.data;\n        })\n        .then(function() {\n            updateLiveView();\n            updateTimeElapsed();\n            $interval( updateLiveView, 60*1000)\n            $interval( updateTimeElapsed, 1000)\n\n            // chart setup\n            margin = {top: 10, right: 50, bottom: 50, left: 50};\n            width = 900 - margin.right - margin.left;\n            height = 400 - margin.top - margin.bottom;\n\n            svg = d3.select(\"#graph\")\n                .attr(\"width\", width + margin.left + margin.right)\n                .attr(\"height\", height + margin.top + margin.bottom);\n\n            chart = svg.append(\"g\")\n                .attr(\"transform\", \"translate(\" + margin.left + \", \" + margin.top +\")\" )\n                .attr(\"width\", width)\n                .attr(\"height\", height);\n\n            // y scales\n            ytscale = d3.scaleLinear()\n                .domain([20, 80])\n                .range([height, 0]); // invert y scale\n            yhscale = d3.scaleLinear()\n                .domain([0, 100])\n                .range([height, 0]); // invert y scale\n            ylscale = d3.scaleLinear()\n                .domain([0, 65535])\n                .range([height, 0]);\n\n            // axis & labels\n            // temperature ->\n            svg.append(\"g\")\n                .call(d3.axisLeft(ytscale))\n                .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n            svg.append(\"text\")\n                .attr(\"transform\", \"rotate(-90)\") // coord system reversed due rotation\n                .attr(\"x\", -height/2)\n                .attr(\"y\", 0)\n                .attr(\"dy\", \"1em\")\n                .style(\"text-anchor\", \"middle\")\n                .text(\"Temperature (\" + $scope.types[\"t\"].unit + \")\");\n            // luminance -->\n            svg.append(\"g\")\n                .call(d3.axisRight(yhscale))\n                .attr(\"transform\", \"translate(\" + (width + margin.right) + \",\" + margin.top + \")\");\n            svg.append(\"text\")\n                .attr(\"transform\", \"rotate(-90)\") // coord system reversed due rotation\n                .attr(\"x\", 0-(height/2))\n                .attr(\"y\", width+margin.left+margin.right)\n                .attr(\"dy\", \"-1em\")\n                .style(\"text-anchor\", \"middle\")\n                .text(\"Humidity (\" + $scope.types[\"h\"].unit+ \")\");\n\n            // time axis label\n            svg.append(\"text\")\n                .attr(\"x\", (width+margin.left+margin.right)/2)\n                .attr(\"y\", height+margin.top+margin.bottom)\n                .attr(\"text-anchor\", \"middle\")\n                .text(\"Date Time\");\n\n            // scale point fns\n            x = (d) => xscale(new Date(d.timestamp));\n            yt = (d) => ytscale(d.t);\n            yh = (d) => yhscale(d.h);\n            yl = (d) => ylscale(d.l);\n\n            // line functions\n            templine = d3.line()\n                .x( x )\n                .y( yt )\n                .curve(d3.curveBasis);\n            humidityline = d3.line()\n                .x( x )\n                .y( yh )\n                .curve(d3.curveBasis);\n            luminanceline = d3.line()\n                .x( x )\n                .y( yl )\n                .curve(d3.curveBasis);\n\n            // draw initial (today's) chart\n            linechartUpdate();\n        });\n\n});\n",
        "x": 300,
        "y": 420,
        "wires": [
            [
                "32ea682d.eb0018"
            ]
        ]
    },
    {
        "id": "32ea682d.eb0018",
        "type": "http response",
        "z": "df0246a4.5a7b18",
        "name": "",
        "x": 470,
        "y": 420,
        "wires": []
    },
    {
        "id": "244d0027.c0d32",
        "type": "comment",
        "z": "df0246a4.5a7b18",
        "name": "month summary",
        "info": "",
        "x": 120,
        "y": 800,
        "wires": []
    },
    {
        "id": "30ab8fa9.7b39e",
        "type": "http in",
        "z": "df0246a4.5a7b18",
        "name": "",
        "url": "/iocp/summary",
        "method": "get",
        "swaggerDoc": "",
        "x": 330,
        "y": 800,
        "wires": [
            [
                "65f98f3d.4bdea"
            ]
        ]
    },
    {
        "id": "6f593cc0.f42674",
        "type": "http response",
        "z": "df0246a4.5a7b18",
        "name": "",
        "x": 990,
        "y": 800,
        "wires": []
    },
    {
        "id": "65f98f3d.4bdea",
        "type": "function",
        "z": "df0246a4.5a7b18",
        "name": "build_query",
        "func": "// query string\nmsg.payload =\n[\n    { $project: {\n        node: true, \n        h: true, \n        t: true, \n        l: true, \n        timestamp: true, \n        _id: true,\n        hour: { $hour: \"$timestamp\"},\n        month: { $month: \"$timestamp\"},\n        year: { $year: \"$timestamp\"}\n    }},\n    { $match: { \n        node: msg.payload.node,\n        month: parseInt(msg.payload.month), \n        year: parseInt(msg.payload.year) \n        } \n    },\n    { $group: {\n            _id: {\n               hour:{$hour:\"$timestamp\"},\n               day:{$dayOfMonth: \"$timestamp\"},\n                month:{$month:\"$timestamp\"},\n                year:{$year:\"$timestamp\"}\n            },\n            averageTemp: { $avg: \"$t\" },\n            averageHumidity: { $avg: \"$h\"},\n            averageLuminance: { $avg: \"$l\"},\n            count: { $sum: 1 }\n        }\n    },\n    {\n        $sort: {\n            \"_id.year\": 1, \n            \"_id.month\": 1, \n            \"_id.day\": 1, \n            \"_id.hour\":1 \n            \n        }\n    }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 800,
        "wires": [
            [
                "56f6cbf0.765e34"
            ]
        ]
    },
    {
        "id": "56f6cbf0.765e34",
        "type": "mongodb in",
        "z": "df0246a4.5a7b18",
        "mongodb": "2fa38bb1.9762c4",
        "name": "aggr: nodes",
        "collection": "nodes",
        "operation": "aggregate",
        "x": 690,
        "y": 800,
        "wires": [
            [
                "c867f617.be86e8"
            ]
        ]
    },
    {
        "id": "c867f617.be86e8",
        "type": "change",
        "z": "df0246a4.5a7b18",
        "name": "clean",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 800,
        "wires": [
            [
                "6f593cc0.f42674"
            ]
        ]
    },
    {
        "id": "2fa38bb1.9762c4",
        "type": "mongodb",
        "z": "",
        "hostname": "127.0.0.1",
        "port": "27017",
        "db": "nodes",
        "name": "nodes"
    }
]